<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
  <mapper namespace="adminWirteMapper">
  	<!-- 일반도서 -->
  	<!-- 일반도서 등록하기 -->
  	<insert id="insertOneNorBook">
  	insert into normal_book values(seq_norBook_No.nextval,#{bookTitle},#{writer},#{bookInfo},#{category},default,#{cover},#{coverRename},'Y',0,0,#{language},#{adminId},#{writerInfo},0)
  	</insert>
  	
  	<!-- 일반도서 삭제 -->
  	<update id="updateNorRemove">
  		update normal_book set STATUS = 'N' where NOR_BOOK_NO = #{bookNo}
  	</update>
  	
  	
  	<resultMap type="NormalBook" id="nBookResultMap">
  		<id property="bookNo" column="NOR_BOOK_NO"/>
	  	<result property="bookTitle" column="BOOK_TITLE"/>
	  	<result property="writer" column="WRITER"/>
	  	<result property="bookInfo" column="BOOK_INFO"/>
	  	<result property="category" column="CATEGORY"/>
	  	<result property="inserDate" column="INSERT_DATE"/>
	  	<result property="cover" column="COVER"/>
	  	<result property="coverRename" column="COVER_RENAME"/>
	  	<result property="status" column="STATUS"/>
	  	<result property="viewCount" column="VIEW_COUNT"/>
	  	<result property="score" column="SCORE"/>
	  	<result property="language" column="LANGUAGE"/>
	  	<result property="adminId" column="ADMINID"/>
	  	<result property="writerInfo" column="WRITER_INFO"/>
	  	<result property="scoreCount" column="SCORECOUNT"/>
  	</resultMap>
  	
  	
  	<!-- 일반도서 제목 가져오기 -->
  	<select id="selectNorBookTitle" resultType="string">
  		select BOOK_TITLE from normal_book where NOR_BOOK_NO = #{bookNo}
  	</select>
  	
  	<!-- 일반도서 한권 열람하기 -->
  	<select id="selectOneNorBook" resultMap="nBookResultMap">
  	  select * from  normal_book where NOR_BOOK_NO = #{bookNo}
  	</select>
  	
  	<!-- 작가한명의 모든 책 제목 가져오기 -->
  	<select id="selectAllNorWriterTitle" resultMap="nBookResultMap">
  		select BOOK_TITLE from normal_book where WRITER = #{writer}
  	
  	</select>
  	
  	<!-- 도서의 언어여부 확인하기 -->
  	<select id="selectBookLanguage" resultType="string">
  		select LANGUAGE from normal_book where NOR_BOOK_NO = #{bookNo}
  	</select>
  	
  	<!-- 책제목 표지 가져오기  -->
  	<select id="selectOneBookStatus" resultMap="nBookResultMap">
  		select BOOK_TITLE, COVER_RENAME from normal_book where NOR_BOOK_NO = #{bookNo} and STATUS like 'Y%'
  	</select>
  	
  		<!-- 일반도서 검색 카운트 가져오기 -->
	<select id="selectCountNorSearchValue" resultType="_int">
		select count(book_no) from hash_tag left join normal_book on book_no = nor_book_no 
		<where>
		status = 'Y' and hash_tag.category = 'normal'
			<if test ="tag != null">
				<if test ="tag.toString() != 'empty'">
					
					and (hashtag1 = #{tag} or hashtag2 = #{tag} or hashtag3 = #{tag})
				</if>
			</if>
			<if test="searchValue != null">
				<if test="category != null">
					<if test="category.toString() == 'title'">
						and book_title like '%'||#{searchValue}||'%'
					</if>
					<if test="category.toString() == 'writer'">
						and writer like '%'||#{searchValue}||'%'
					</if>
				</if>
			</if>
		</where>
	</select>
	
	
	<!-- 일반도서 검색 카운트 가져오기 -->
	<select id="selectBookSearchValueNor" resultMap="nBookResultMap">
		select * from hash_tag left join normal_book on book_no = nor_book_no 
		<where>
		status = 'Y' and hash_tag.category = 'normal'
			<if test ="tag != null">
				<if test ="tag.toString() != 'empty'">
					
					and (hashtag1 = #{tag} or hashtag2 = #{tag} or hashtag3 = #{tag})
				</if>
			</if>
			<if test="searchValue != null">
				<if test="category.toString() == 'title'">
					and book_title like '%'||#{searchValue}||'%'
				</if>
				<if test="category.toString() == 'writer'">
					and writer like '%'||#{searchValue}||'%'
				</if>
			</if>
		</where>
		<if test="step.toString() == 'all'">
   		order by insert_date desc
	   	</if>
	   	<if test="step.toString() == 'star'">
	   		order by DECODE(scorecount, 0, 0, score/scorecount) desc
	   	</if>
	   	<if test="step.toString() == 'count'">
	   		order by view_count desc
	   	</if>
	</select>
  	
  	
  	<!-- 조회수 높은 소설이미지, 동화 이미지 하나씩 가져오기 -->
  	<select id="selectOneNorimg" resultType="string">
  		select COVER_RENAME from  normal_book where category = 'novel' and ROWNUM=1 order by view_count desc
  	</select>
  	<select id="selectOneNorimg2" resultType="string">
  		select COVER_RENAME from  normal_book where category = 'tale' and ROWNUM=1 order by view_count desc
  	</select>
  	
  	 	<!-- 카테고리별 도서 갯수, 모든 도서 -->
  	<select id="CountAllNormalCategory" resultType="_int">
  		select count(nor_book_No) from normal_book where status like 'Y%' and category = #{category}
  	</select>
  	
  	<select id="allNormalCategory" resultMap="nBookResultMap">
  		select nor_book_no, book_title, book_Info, cover_Rename, writer from NORMAL_BOOK where status like 'Y%' and category = #{category}		
  		 <if test="step.toString() == 'all'">
   			order by insert_date desc
	   	</if>
	   	<if test="step.toString() == 'star'">
	   		order by DECODE(scorecount, 0, 0, score/scorecount) desc
	   	</if>
	   	<if test="step.toString() == 'count'">
	   		order by view_count desc
	   	</if>
  		
  	</select>
  	
  	<!-- 랭킹 6까지 카테고리 별로 가져오기 -->
	<select id="selectRankNorBook" resultMap="nBookResultMap">
		select * from(
		select nor_book_no, book_title, cover_rename, ROW_NUMBER() over (order by view_count desc) r 
		from normal_book where category = #{category} and status like 'Y%') where r between 1 and 6
	</select>
	  	
  	
  	<!-- 일반도서 시리즈 -->
  	<!-- 일반도서 1화 등록하기 -->
  <insert id="insertNSeriesBook">
  insert into nor_series values(#{seriesNo},seq_norBook_No.currval,#{subPic},#{subpicRename},#{title},#{contents},default,null)
  
  </insert>
  <!-- 일반도서 다음화 등록하기 -->
  <insert id="insertNextNorSeries">
  insert into nor_series values(#{seriesNo},#{bookNo},#{subPic},#{subpicRename},#{title},#{contents},default,null)
  </insert>	
  
  <!-- 일반도서 시리즈 수정하기 -->
  <update id="updateNorbookSeries">
  update nor_series set SUB_PIC= #{subPic}, SUB_PIC_RE= #{subpicRename}, TITLE=#{title}, CONTETNS=#{contents}, UPDATE_DATE = default where SERIES_NO =#{seriesNo} and NOR_BOOK_NO=#{bookNo}
  </update>
  
  <!-- 일반도서 시리즈 한개 삭제하기 -->
  <delete id="deleteOneNorSeries">
  delete from nor_series where NOR_BOOK_NO = #{bookNo} and SERIES_NO = #{seriesNo}
  </delete>
  
  <!-- 도서번호한개의 모든 시리즈 삭제하기 -->
  <delete id="updateAllNorSeriesRemove">
   delete from nor_series where NOR_BOOK_NO = #{bookNo}
  </delete>
  	
  	<resultMap type="NormalBookSeries" id="nbSeriesResultMap">
  	<id property="seriesNo" column="SERIES_NO"/>
  	<result property="bookNo" column="NOR_BOOK_NO"/>
  	<result property="subPic" column="SUB_PIC"/>
  	<result property="subpicRename" column="SUB_PIC_RE"/>
  	<result property="title" column="TITLE"/>
  	<result property="contents" column="CONTETNS"/>
  	<result property="insertDate" column="INSERT_DATE"/>
  	<result property="updateDate" column="UPDATE_DATE"/>
  	<result property="bookTitle" column="book_title"/>
  	
  	</resultMap>
  	
  	
  	<!-- 모든 일반도서 시리즈 갯수파악 -->
  	<select id="allNorBookCount" resultType="_int">
  		select count(*) from nor_series 
  	</select>
  	
  	<!-- 모든 일반도서 시리즈 가져오기 -->
  	<select id="allNorBook" resultMap="nbSeriesResultMap">
  		select SERIES_NO,NOR_BOOK_NO,SUB_PIC_RE,TITLE,book_title from nor_series left join normal_book using (nor_book_no) order by nor_series.INSERT_DATE desc
  	</select>
  	
  	<!-- 책번호에 해당하는 일반도서 시리즈의 특정정보 가져오기 -->
  	<select id="selectOneNorSeriesTitle" resultMap="nbSeriesResultMap">
  		select TITLE, ADMINID,SERIES_NO  from nor_series left join normal_book using(NOR_BOOK_NO) where NOR_BOOK_NO = #{bookNo} order by SERIES_NO
  	</select>
  	
  	<!-- 일반도서 한권의 모든 시리즈 가져오기 -->
  	<select id="selectAllNorBookSeries" resultMap="nbSeriesResultMap">
  		select * from nor_series where NOR_BOOK_NO = #{bookNo} order by SERIES_NO
  	</select>
  	
  	<!-- 일반도서 시리즈 1개 가져오기 -->
	<select id="selectOneNorSeries" resultMap="nbSeriesResultMap">
		select * from nor_series where NOR_BOOK_NO = #{bookNo} and SERIES_NO = #{seriesNo}
	</select>  
	
	<!-- 일반도서 한개의 모든 시리즈 가지고 오기 -->
	<select id="selectOneNorBookSeriesNo" resultMap="nbSeriesResultMap">
		select SERIES_NO from nor_series where NOR_BOOK_NO = #{bookNo} order by SERIES_NO
	</select>	
	

  	
  	<!-- 태그 테이블 -->
  	
  	<insert id="insertNBTag">
  	insert into hash_tag values(seq_norBook_No.currval,#{category}, #{hashTag1}, #{hashTag2}, #{hashTag3})
  	</insert>
  	
  
  	<!-- 조회수 영역 -->
  	
  	<!-- 조회 한적 있는 지 체크 -->
  	<select id="selectOneCheckCount" resultType="_int">
  	select count(*) from view_count where member_id = #{memberId} and series_no=#{seriesNo} and book_no=#{bookNo} and category='normal'
  	</select>
	<update id="updateBookCount">
	update normal_book set view_count = view_count+1 where nor_book_no=#{bookNo}
	</update>
  	<insert id="insertBookCount">
  	insert into view_count values(#{bookNo},#{seriesNo},#{memberId},null,null,'normal')
  	</insert>
  	
  
  
  </mapper>