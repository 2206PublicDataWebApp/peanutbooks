<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bookReplyMapper">

<!-- 피넛 오리지널 리플 쓰기 -->
	<insert id="insertOriBookReply">
	insert into origin_reply values(seq_orireplyno.nextval, #{bookNo}, #{memberId}, #{reContents}, default)
	</insert>
	
	<!-- 피널 오리지널 리플 수정하기 -->
	<update id="updateOriReply">
	update origin_reply set RE_CONTETNS = #{reContents} where REPLY_NO= #{replyNo}
	</update>
	
	<!-- 피넛 오리지널 리플 삭제하기 -->
	<delete id="deleteOriReply">
	delete origin_reply where REPLY_NO= #{rNo}
	</delete>
	
	<resultMap type="OriginBookReply" id="obReplyResultMap">
	<id property="replyNo" column="REPLY_NO"/>
	<result property="bookNo" column="ORI_BOOK_NO"/>
	<result property="memberId" column="MEMBERID"/>
	<result property="reContents" column="RE_CONTETNS"/>
	<result property="insertDate" column="INSERT_DATE"/>


	</resultMap>
	
	<select id="selectAllOriReply" resultMap="obReplyResultMap">
	select * from origin_reply where ORI_BOOK_NO = #{bookNo} order by reply_No desc
	</select>
	
	<select id="countOriReply" resultType="_int">
	select count(*) from origin_reply where ORI_BOOK_NO = #{bookNo}
	</select>
	
	<select id="selectOneOriBookReply" resultType="string">
	select RE_CONTETNS from origin_reply where REPLY_NO= #{rNo}
	</select>
	
	<select id="selectOneReplyMember" resultType="string">
	select MEMBERID from origin_reply where REPLY_NO= #{rNo}
	</select>
	
	
	
	<!-- 별점 주기 쿼리문 -->
	<insert id="insertScore">
	insert into star values(#{memberId},#{bookNo},#{score},#{category})
	</insert>
	
	<!-- 피넛 오리지널 별점주기 -->
	<update id="updateOriBook">
	update origin_book set score = score + #{score} , SCORE_COUNT = SCORE_COUNT + 1 where ORI_BOOK_NO = #{bookNo}
	</update>
	
	<update id="UpdateOriBookScoreMinus">
	update origin_book set score = score - #{score} , SCORE_COUNT = SCORE_COUNT - 1 where ORI_BOOK_NO = #{bookNo}
	</update>
	
	<!-- 일반도서 별점주기 -->
	<update id="updateNorBook">
	update normal_book set score = score + #{score} , SCORECOUNT = SCORECOUNT + 1 where Nor_BOOK_NO = #{bookNo}
	</update>
	<update id="UpdateNorBookScoreMinus">
	update normal_book set score = score - #{score} , SCORECOUNT = SCORECOUNT - 1 where Nor_BOOK_NO = #{bookNo}
	</update>
	
	
	<!-- 별점 삭제 쿼리문 -->
	<delete id="deleteScore">
	delete star where member_id = #{memberId} and BOOK_NO = ${bookNo} and category = #{category}
	</delete>
	
	
	<!-- 별점가져오기 -->
	<select id="selectOneScore" resultType="_int">
	select score from star where MEMBER_ID = #{memberId} and BOOK_NO = #{bookNo} and CATEGORY = #{category}
	</select>
	
	
	<resultMap type="com.books.peanut.book.domain.Star" id="starResultMap">
	<id property="memberId" column="MEMBER_ID"/>
	<result property="bookNo" column="BOOK_NO"/>
	<result property="score" column="SCORE"/>
	<result property="category" column="CATEGORY"/>
	</resultMap>
	
	<!-- 별점 정보 하나 가져오기 -->
	<select id="selectOneStar" resultMap="starResultMap">
	select * from star where MEMBER_ID = #{memberId} and BOOK_NO = #{bookNo} and CATEGORY = #{category}
	</select>
	
	<!-- 일반도서 리플  영억-->
	
	<!-- 일반도서 리플쓰기 -->
	<insert id="insertNorBookReply">
	insert into normal_reply values(seq_nor_reply.nextval, #{bookNo}, #{memberId}, #{contents}, default)
	</insert>
	<!-- 일반도서 리플 수정하기 -->
	<update id="updateNorReply">
	update normal_reply set CONTENTS = #{contents} where REPLY_NO= #{replyNo}
	</update>
	
	<!-- 일반도서 리플 삭제 -->
	<update id="deleteNorReply">
	delete normal_reply where REPLY_NO= #{rNo}
	</update>
	
	<resultMap type="NormalBookReply" id="norBookReplyResultMap">
	<id property="replyNo" column="REPLY_NO"/>
	<result property="bookNo" column="NOR_BOOK_NO"/>
	<result property="memberId" column="MEMBER_ID"/>
	<result property="contents" column="CONTENTS"/>
	<result property="insertDate" column="INSERT_DATE"/>
	
	</resultMap>
	
	<!-- 일반도서 리플 수 가져오기 -->
	<select id="countNorReply" resultType="_int">
	select count(*) from normal_reply where nor_book_no = #{booNo}
	</select>
	
	<!-- 일반도서 리플리스트 가져오기 -->
	<select id="selectAllnorReply" resultMap="norBookReplyResultMap">
	select * from normal_reply where NOR_BOOK_NO = #{booNo} order by reply_No desc
	</select>
	
	<!-- 일반도서 리플쓴사람 체크하기 -->
	<select id="selectOneNorReplyMember" resultType="string">
	select MEMBER_ID from normal_reply where REPLY_NO= #{replyNo}
	</select>
	
	<!-- 일반도서 리플내용 가져오기 -->
	<select id="selectOneNorBookReply" resultType="string">
	select CONTENTS from normal_reply where REPLY_NO= #{rNo}
	</select>
</mapper>