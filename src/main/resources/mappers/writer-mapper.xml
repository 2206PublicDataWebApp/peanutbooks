<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="wirterMapper">
  
  
  
 <!--  작가 프로필 쿼리문 -->
  <insert id="insertProfile">
  insert into writer_profile values(#{memberId}, #{mainPic}, #{headPic}, #{info}, #{mainPicRename}, #{headPicRename})
  
  </insert>
  
  <update id="updateProfile">
  update writer_profile set MAIN_PIC = #{mainPic}, HEAD_PIC = #{headPic},  MAIN_PIC_RENAME=#{mainPicRename}, HEAD_PIC_RENAME=#{headPicRename}, info=#{info} where member_id =#{memberId} 
  </update>

  
  <resultMap type="writerProfile" id="wrtierProfileResultMap">
  	<id property="memberId" column="member_id"/>
  	<result property="mainPic" column="MAIN_PIC"/>
  	<result property="headPic" column="HEAD_PIC"/>
  	<result property="mainPicRename" column="MAIN_PIC_RENAME"/>
  	<result property="headPicRename" column="HEAD_PIC_RENAME"/>
  	<result property="info" column="INFO"/>
  </resultMap>
  
  <select id="selectOneMember" resultMap="wrtierProfileResultMap">
  	select * from writer_profile where member_id = #{memberId}
  </select>
  
  
<!--   오리지널 북 쿼리문 -->
<insert id="insertBook">
 insert into origin_book values(oribookseq.nextval,#{bookTitle},#{bookInfo},#{category},default,#{cover},#{coverRename},default,0,0,#{memberId},default,0)
</insert>

<update id="updateOriRemove">
	update origin_book set STATUS = 'N' where ORI_BOOK_NO = #{bookNo}
</update>

<resultMap type="OriginBook" id="oriBookResultMap">
<id property="bookNo"  column="ORI_BOOK_NO"/>
<result property="bookTitle" column="BOOK_TITLE"/>
<result property="bookInfo" column="BOOK_INFO"/>
<result property="category" column="CATEGORY"/>
<result property="insertDate" column="INSERT_DATE"/>
<result property="cover" column="CORVER"/>
<result property="coverRename" column="CORVER_RENAME"/>
<result property="status" column="STATUS"/>
<result property="score" column="SCORE"/>
<result property="viewCount" column="VIEW_COUNT"/>
<result property="memberId" column="MEMBER_ID"/>
<result property="checkPermission" column="BOOK_PERMISSION"/>
<result property="scoreCount" column="SCORE_COUNT"/>
<result property="memberNickName" column="M_NICKNAME"/>
</resultMap>

<!-- 도서 제목 가져오기 -->
<select id="selectBookTitle" resultType="string">
select BOOK_TITLE from origin_book where ORI_BOOK_NO = #{bookNo}
</select>

<!-- 도서 한개 정보 전부 가져오기 -->
<select id="selectOneBook" resultMap="oriBookResultMap">
select * from origin_book where ORI_BOOK_NO = #{bookNo}
</select>

<!-- 사용자의 모든 도서 제목 가져오기 -->
<select id="selectAllWriterBookTitle" resultMap="oriBookResultMap">
select BOOK_TITLE from origin_book where MEMBER_ID = #{memberId}
</select>

<!-- 작가가 맞는지 체크 -->
<select id="selectCheckWriter" resultType="_int">
select count(BOOK_TITLE) from origin_book where MEMBER_ID = #{memberId} and ORI_BOOK_NO = #{bookNo}
</select>

<!-- 삭제되지 않고 승인된 책의 표지와 제목 -->
<select id="selectOneBookStatus" resultMap="oriBookResultMap">
 select BOOK_TITLE, CORVER_RENAME from origin_book where ORI_BOOK_NO = #{bookNo} and STATUS like 'Y%' and BOOK_PERMISSION like 'Y%'
</select>



<!-- 피넛 오리지널 검색 숫자 -->
  <select id="selectCountOriSearchValue" resultType="_int">
   select count(*) from hash_tag left join origin_book on book_no = ori_book_no 
   left join member_tbl using(member_id) 
   <where>
   	status = 'Y' and BOOK_PERMISSION = 'Y'
	   <if test ="tag != null">
			and hash_tag.category = 'origin'
			and (hashtag1 = #{tag} or hashtag2 = #{tag} or hashtag3 = #{tag})
		</if>
		<if test="searchValue != null">
			<if test="category.toString() == 'title'">
					and book_title like '%'||#{searchValue}||'%'
			</if>
			<if test="category.toString() == 'writer'">
					and m_NikcNAme like '%'||#{searchValue}||'%'
			</if>
		</if>
   </where>
  </select>
  
<!-- 피넛 오리지널 검색 하기 -->
  <select id="selectBookSearchValue" resultMap="oriBookResultMap">
   select * from hash_tag left join origin_book on book_no = ori_book_no 
   left join member_tbl using(member_id) 
   <where>
   	status = 'Y' and BOOK_PERMISSION = 'Y'
	   <if test ="tag != null">
			and hash_tag.category = 'origin'
			and (hashtag1 = #{tag} or hashtag2 = #{tag} or hashtag3 = #{tag})
		</if>
		<if test="searchValue != null">
			<if test="category != null">
				<if test="category.toString() == 'title'">
						and book_title like '%'||#{searchValue}||'%'
				</if>
				<if test="category.toString() == 'writer'">
						and m_NikcNAme like '%'||#{searchValue}||'%'
				</if>
			</if>
		</if>
   </where>
   	<if test="step.toString() == 'all'">
   		order by insert_date desc
   	</if>
   	<if test="step.toString() == 'star'">
   		order by DECODE(score, 0, 0, score_count/score)
   	</if>
   	<if test="step.toString() == 'count'">
   		order by view_count desc
   	</if>
  </select>
  




<!-- 책 승인 테이블에 추가 -->
<insert id="insertPermission1">
	insert into book_permission values(seq_permission.nextval,oribookseq.currval,null,null,null,null,#{seriesNo})
</insert>
<insert id="insertPermission2">
	insert into book_permission values(seq_permission.nextval,#{bookNo},null,null,null,null,#{seriesNo})
</insert>


<!-- 오리지널 시리즈 쿼리문 -->
<!--  오리지널 시리즈 등록 1편 -->
<insert id="insertSeries1">
	insert into ori_series values(#{seriesNo},oribookseq.currval,#{subPic},#{subPicRename},#{title},#{contents},null,default,null,0,#{paidCheck},0,default,default)
</insert>

<!-- 오리지널 시리즈 등록(2편부터) -->
<insert id="insertNextOseries">
	insert into ori_series values(#{seriesNo},#{bookNo},#{subPic},#{subPicRename},#{title},#{contents},null,default,null,0,#{paidCheck},0,default,default)

</insert>

<!-- 오리지널 시리즈 수정 -->
<insert id="updateOriSeries">
	insert into modify_ori_series values(#{seriesNo},#{bookNo},#{subPic},#{subPicRename},#{title},#{modifyContents},default,#{paidCheck})
</insert>
<!-- 시리즈 수정 신청테이블에 추가 -->
<insert id="permissionModify">
	insert into book_permission values(seq_permission.nextval,#{bookNo},null,null,null,'Y',#{seriesNo})
</insert>

<update id="updateOriSeriesRemove">
	update ori_series set status = 'N' where SERIES_NO = ${seriesNo} and ORI_BOOK_NO = #{bookNo}
</update>

<update id="updateAllOriSeriesRemove">
update ori_series set status = 'N' where ORI_BOOK_NO = #{bookNo}
</update>

<resultMap type="OriginBookSeries" id="oriSeriesResultMap">
<id property="seriesNo" column="SERIES_NO"/>
<result property="bookNo" column="ORI_BOOK_NO"/>
<result property="subPic" column="SUB_PIC"/>
<result property="subPicRename" column="SUB_PIC_RE"/>
<result property="title" column="TITLE"/>
<result property="contents" column="CONTENTS"/>
<result property="modifyContents" column="MODIFY_CONTENTS"/>
<result property="insertDate" column="INSERT_DATE"/>
<result property="modifyDate" column="MODIFY_DATE"/>
<result property="paidCount" column="PAID_COUNT"/>
<result property="paidCheck" column="PAID_CHECK"/>
<result property="viewCount" column="VIEW_COUNT"/>
<result property="checkPermission" column="CHECK_PERMISSION"/>
<result property="status" column="status"/>

</resultMap>

<!-- 회원 한명이 작성한 시리즈 전부 가져오기 -->
<select id="selectOneMemberSeriese" resultMap="oriSeriesResultMap">
	select * from ori_series join origin_book using(ori_book_no) where member_id = #{memberId} order by ori_series.INSERT_DATE desc
</select>

<!-- 회원한명이 작성한 피넛 오리지널 시리즈의 숫자 가져오기 -->
<select id="selectAllMemberOriSeries" resultType="_int">
	select count(*) from ori_series join origin_book using(ori_book_no) where member_id = #{memberId} order by ORI_BOOK_NO
</select>

<!-- 도서 한권의 시리즈 제목 전부 가져오기 -->
<select id="selecSeriesTitle" resultMap="oriSeriesResultMap">
	select title,status,CHECK_PERMISSION,SERIES_NO from ori_series where ORI_BOOK_NO = #{bookNo}
</select>

<!-- 도서 하나에 해당하는 모든 피넛 오리지널 시리즈 가져오기 -->
<select id="selectAllOriBookSeries" resultMap="oriSeriesResultMap">
	select * from ori_series where ORI_BOOK_NO = #{bookNo}
</select>

<!-- 시리즈 하나의 유료화 여부 체크 -->
<select id="chekedpayOneSeries" resultType="string">
	select PAID_CHECK from ori_series where ORI_BOOK_NO = #{bookNo} and SERIES_NO = #{seriesNo}
</select>

<!-- 책번호와 시리즈 번호로 시리즈 하나 가져오기 -->
<select id="selectOneObSeries" resultMap="oriSeriesResultMap">
	select * from ori_series where ORI_BOOK_NO = #{bookNo} and SERIES_NO = #{seriesNo}
</select>

<!-- 책번호로 허가되고 삭제되지 않은 해당도서의 시리즈 번호 가져오기 -->
<select id="selectOneOriBookSeriesNo" resultMap="oriSeriesResultMap">
	select SERIES_NO from ori_series where ORI_BOOK_NO = #{bookNo} and status like 'Y%' and CHECK_PERMISSION like 'Y%'
</select>

<!-- 해당도서에 쓰여진 모든 시리즈 번호 가져오기 -->
<select id="selectOneOriBookAllSeriesNo" resultMap="oriSeriesResultMap">
	select SERIES_NO from ori_series where ORI_BOOK_NO = #{bookNo}
</select>

<!-- 허가되고 삭제되지 않은 시리즈 1편 가져오기 -->
  <select id="SelectOneBookSeriesStatus" resultMap="oriSeriesResultMap">
  select SERIES_NO, SUB_PIC_RE, TITLE  from ori_series where ORI_BOOK_NO = #{bookNo} and SERIES_NO = #{seriesNo} and status like 'Y%' and CHECK_PERMISSION like 'Y%'
  </select>
  



<!-- 해시태그 쿼리문 -->
<insert id="insertTag">
	insert into hash_tag values(oribookseq.currval,#{category},#{hashTag1},#{hashTag2},#{hashTag3})
</insert>

<resultMap type="HashTag" id="HashTagResultMap">
	<id property="bookNo" column="BOOK_NO"/>
	<result property="category" column="CATEGORY"/>
	<result property="hashTag1" column="HASHTAG1"/>
	<result property="hashTag2" column="HASHTAG2"/>
	<result property="hashTag3" column="HASHTAG3"/>
</resultMap>

<!-- 도서한권에 해당하는 해시태그 -->
<select id="selectOneBookTag" resultMap="HashTagResultMap">
	select * from hash_tag where CATEGORY = #{category} and BOOK_NO =#{bookNo}
</select>

  
  <!-- 회원 닉네임 가져오기 -->
  <select id="oneMemberNick" resultType="string">
  select M_NICKNAME from member_tbl where member_id = #{memberId}
  </select>
  
  <!-- 피넛테이블에서 구입여부 체크 -->
  <select id="selectOnebokkPurchase" resultType="_int">
  select count(*) from peanutpoint_tbl where MEMBER_ID = #{memberId} and SERIES_NO = #{seriesNo} and BOOK_NO = #{bookNo}
  </select>
  
  <!-- 멤버 테이블에서 구독권 여부 체크 -->
  <select id="selectCheckSubscribe" resultType="_int">
  select count(*) from member_tbl where MEMBER_ID = #{memberId} and SUB_YN = 'Y'
  </select>
  
  <!-- 피넛갯수 확인하기 -->
  <select id="selectCheckPoint" resultType="_int">
  select M_POINT from member_tbl where MEMBER_ID = #{memberId}
  </select>
  
  <!-- 도서 구입해서 피넛 사용하기 -->
  <update id="UsePeanutOne">
  update member_tbl set M_POINT = M_POINT -1  where MEMBER_ID = #{memberId}
  </update>
  
  <!-- 구입한 도서 피넛포인트 테이블에 넣기 -->
  <insert id="insertBuyOneSeries">
  insert into peanutpoint_tbl values(SQN_PEANUT_NO.nextval,sysdate,-1,default,#{bookNo},#{bookTitle},#{memberId},default,#{seriesNo})
  </insert>
  
  </mapper>