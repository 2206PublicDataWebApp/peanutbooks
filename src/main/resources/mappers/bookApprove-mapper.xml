<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="BookApproveMapper">
 	<!-- 도서 승인 -->
 	<resultMap type="BookApprove" id="BookApproveResultMap">
 		<id column="APPROVE_NO"         property="approveNo" />
 		<result column="ORI_BOOK_NO"    property="oriBookNo" />
 		<result column="APPROVE"        property="approve" />
 		<result column="APPROVE_DATE"   property="approveDate" />
 		<result column="APPROVE_UPDATE" property="approveUpdate" />
 		<result column="REAPPROVE"      property="reApprove" />
 		<result column="BOOK_SERIES_NO" property="bookSeriesNo" />
 	</resultMap>
 	
 	<!-- Books: 도서물의 제목, 표지, 책소개 테이블 명 origin_book-->
 	<resultMap type="OriginBook" id="oriBookResultMap">
		<id property="bookNo"  column="ORI_BOOK_NO"/>
		<result property="bookTitle" column="BOOK_TITLE"/>
		<result property="bookInfo" column="BOOK_INFO"/>
		<result property="category" column="CATEGORY"/>
		<result property="insertDate" column="INSERT_DATE"/>
		<result property="cover" column="CORVER"/>
		<result property="coverRename" column="CORVER_RENAME"/>
		<result property="status" column="STATUS"/>
		<result property="score" column="SCORE"/>
		<result property="viewCount" column="VIEW_COUNT"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="checkPermission" column="BOOK_PERMISSION"/>
		<result property="scoreCount" column="SCORE_COUNT"/>            <!--  별점 준 사람명수 - 별점평균 뽑을때 -->
	</resultMap>

	
	<select id="selectAllBooks" resultMap="oriBookResultMap">
		SELECT * FROM origin_book ORDER BY ORI_BOOK_NO DESC
	</select>
	
	<!-- Origin: 도서물 테이블 -->
	<resultMap type="OriginBookSeries" id="oriSeriesResultMap">
		<id property="seriesNo" column="SERIES_NO"/>
		<result property="bookNo" column="ORI_BOOK_NO"/>
		<result property="subPic" column="SUB_PIC"/>
		<result property="subPicRename" column="SUB_PIC_RE"/>
		<result property="title" column="TITLE"/>
		<result property="contents" column="CONTENTS"/>
		<result property="modifyContents" column="MODIFY_CONTENTS"/>
		<result property="insertDate" column="INSERT_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<result property="paidCount" column="PAID_COUNT"/>
		<result property="paidCheck" column="PAID_CHECK"/>
		<result property="viewCount" column="VIEW_COUNT"/>
		<result property="checkPermission" column="CHECK_PERMISSION"/>
		<result property="status" column="status"/>
	</resultMap>
	
	<!-- MODIFY_ORI_SERIES: 도서물 테이블 -->
	<resultMap type="ModifyBookSeries" id="modifySeriesResultMap">
		<id property="seriesNo" column="SERIES_NO"/>
		<result property="bookNo" column="ORI_BOOK_NO"/>
		<result property="subPic" column="SUB_PIC"/>
		<result property="subPicRename" column="SUB_PIC_RE"/>
		<result property="title" column="TITLE"/>
		<result property="modifyContents" column="MODIFY_CONTENTS"/>
		<result property="insertDate" column="INSERT_DATE"/>
		<result property="paidCheck" column="PAID_CHECK"/>
		<result property="modifyNo" column="MODIFY_NO"/>
	</resultMap>
 	
 	<!-- 회원이 작성한 피넛 오리지널 시리즈의 숫자 가져오기 -->
	<select id="selectAllOriSeries" resultType="_int">
		select count(*) from ori_series join origin_book using(ori_book_no) order by ORI_BOOK_NO
	</select>
	
	<!-- 회원이 작성한 시리즈 전부 가져오기 -->
	<select id="selectAllMemberSeriese" resultMap="oriSeriesResultMap">
		select * from ori_series join origin_book using(ori_book_no) order by SERIES_NO DESC
	</select>
	
	<!-- 승인/보류 리스트 갯수 가져오기 -->
	<select id="selectCheckPermission" resultType="_int">
		select count(*)
		from ORI_SERIES a 
		join ORIGIN_BOOK b on a.ORI_BOOK_NO = b.ORI_BOOK_NO
		join BOOK_PERMISSION c on b.ORI_BOOK_NO = c.ORI_BOOK_NO and a.series_no = c.book_series_no
		<where>
		<if test="checkPermission.toString() != 'all'">
		CHECK_PERMISSION=#{checkPermission}
		</if>
		</where>
	</select>
	
	<!-- 승인/보류 리스트 가져오기 -->
	<select id="selectCheckPermissionList" resultMap="oriSeriesResultMap">
		select a.SERIES_NO, a.ORI_BOOK_NO, b.BOOK_TITLE, a.TITLE, a.SUB_PIC_RE, a.CHECK_PERMISSION
		from ORI_SERIES a 
		join ORIGIN_BOOK b on a.ORI_BOOK_NO = b.ORI_BOOK_NO
		join BOOK_PERMISSION c on b.ORI_BOOK_NO = c.ORI_BOOK_NO and a.series_no = c.book_series_no
		<where>
		<if test="checkPermission.toString() != 'all'">
		CHECK_PERMISSION=#{checkPermission}
		</if>
		</where> 
		<if test="step.toString() == 'date'">
		order by APPROVE_NO DESC nulls last
		</if>
		<if test="step.toString() == 'number'">
		order by APPROVE_NO
		</if>
		<if test="step.toString() == 'all' || step.toString() == null ">
		order by APPROVE_NO desc
		</if>
		
	</select>
	
	<!--  재승인 리스트 갯수 가져오기 -->
	<select id="selectAllReAppCount" resultType="_int">
		select count(*) from modify_ori_series join origin_book using(ori_book_no) order by SERIES_NO DESC
	</select>
	
	<!-- 재승인 리스트 가져오기  -->
	<select id="selectAllReAppList" resultMap="modifySeriesResultMap">
		select * from modify_ori_series join origin_book using(ori_book_no) order by SERIES_NO DESC
	</select>
	
	<!-- 도서 제목 가져오기 -->
	<select id="selectBookTitle" resultType="string">
		select BOOK_TITLE from origin_book where ORI_BOOK_NO = #{bookNo}
	</select>

	<!-- 도서 승인 -->
	<update id="updateApproveBooks">
		UPDATE BOOK_PERMISSION SET approve='Y', APPROVE_DATE = SYSDATE WHERE ORI_BOOK_NO = #{bookNo} and book_series_no = #{seriesNo}
	</update>
	<update id="updateOriBookApprove">
		Update origin_book set BOOK_PERMISSION = 'Y' where ori_book_no = #{bookNo}
	</update>
	<update id="updateOriBookSeiresApprove">
		Update ori_series set CHECK_PERMISSION = 'Y' where ori_book_no = #{bookNo} and series_no = #{seriesNo}
	</update>
	
	<!-- 도서 재승인 -->
	<update id="updateREAppInPermission">
		insert into BOOK_PERMISSION values(seq_permission.nextval,#{bookNo},'Y',SYSDATE,SYSDATE,null,#{seriesNo})
	</update>
	<update id="updateReAppUpSeries">
		update ori_series set CHECK_PERMISSION = 'Y', MODIFY_DATE = SYSDATE where SERIES_NO = ${seriesNo} and ORI_BOOK_NO = #{bookNo}
	</update>
	<update id="updateReAppDelModify">
		DELETE FROM modify_ori_series WHERE modify_No =#{modifyNo}
	</update>
	
	
 	
 	<!-- admin 회원관리 -->
 	<resultMap type="Member" id="memberResultMap">
		<id property="memberId" column="MEMBER_ID"/> <!-- 회원 아이디 -->
		<result property="memberPw" column="MEMBER_PW"/> <!-- 회원 비밀번호 -->
		<result property="mNickname" column="M_NICKNAME"/> <!-- 회원 별명 -->
		<result property="mEmail" column="M_EMAIL"/> <!-- 회원 이메일 -->
		<result property="emailYN" column="EMAIL_YN"/> <!-- 이메일 인증 여부 -->
		<result property="joinDate" column="JOIN_DATE"/> <!-- 회원 등록일 -->
		<result property="deleteYN" column="DELETE_YN"/> <!-- 회원 탈퇴 여부 -->
		<result property="mPoint" column="M_POINT"/> <!-- 회원 포인트(땅콩) -->
		<result property="subYN" column="SUB_YN"/> <!-- 월 구독 여부 -->
		<result property="snsId" column="SNS_ID"/> <!-- SNS 아이디 -->
		<result property="accType" column="ACC_TYPE"/> <!-- 계정 종류(일반/네이버/카카오) -->
		<result property="adminYN" column="ADMIN_YN"/> <!-- 관리자 여부 -->
		<result property="authKey" column="AUTH_KEY"/> <!-- 이메일 인증 키(난수) -->
	</resultMap>
	<!-- 전체회원수 구하기(페이징을 위해) -->
 	<select id="selectAllMemberCount" resultType="_int">
 		SELECT COUNT(*) FROM MEMBER_TBL
 		<where>
 			<if test="searchCondition.toString() == 'name'">
 				M_NICKNAME LIKE '%'||#{searchValue}||'%' 
 			</if>
 			<if test="searchCondition.toString() == 'id'">
 				MEMBER_ID LIKE '%'||#{searchValue}||'%' 
 			</if>
 			<if test="searchCondition.toString() == 'all'">
 				M_NICKNAME LIKE '%'||#{searchValue}||'%'
 				OR MEMBER_ID LIKE '%'||#{searchValue}||'%'
 			</if>
 			<if test="code.toString() != 'all'">
	 			<if test="code.toString() == 'today'">
 					JOIN_DATE LIKE SYSDATE
 				</if>
 				<if test="code.toString() == 'del'">
 					DELETE_YN LIKE 'Y'
 				</if>
 			</if>
 		</where>
 	</select>
 	<!-- 회원상세 검색 -->
 	<select id="selectSearchAllMember" resultMap="memberResultMap">
 		SELECT M_NICKNAME, MEMBER_ID, M_POINT, DELETE_YN, JOIN_DATE FROM MEMBER_TBL 
 		<where>
 			<if test="searchCondition.toString() == 'name'">
 				M_NICKNAME LIKE '%'||#{searchValue}||'%' 
 			</if>
 			<if test="searchCondition.toString() == 'id'">
 				MEMBER_ID LIKE '%'||#{searchValue}||'%' 
 			</if>
 			<if test="searchCondition.toString() == 'all'">
 				M_NICKNAME LIKE '%'||#{searchValue}||'%'
 				OR MEMBER_ID LIKE '%'||#{searchValue}||'%'
 			</if>
 			ORDER BY JOIN_DATE DESC
 		</where>
 	</select>
 	<!-- 전체회원 출력 -->
 	<select id="selectAllMembers" resultMap="memberResultMap">
 		SELECT M_NICKNAME, MEMBER_ID, M_POINT, DELETE_YN, JOIN_DATE FROM MEMBER_TBL 
 		<where>
 			<if test="code.toString() != 'all'">
	 			<if test="code.toString() == 'today'">
 					JOIN_DATE LIKE SYSDATE
 				</if>
 				<if test="code.toString() == 'del'">
 					DELETE_YN LIKE 'Y'
 				</if>
 			</if>
 		</where>
 		ORDER BY JOIN_DATE DESC
 	</select>
 	<!-- 회원상세보기 -->
 	<select id="selectOneById" resultMap="memberResultMap">
 		SELECT * FROM MEMBER_TBL WHERE MEMBER_ID = #{memberId}
 	</select>
 	<!-- 회원삭제 -->
 	<delete id="deleteOneById">
 		DELETE FROM MEMBER_TBL WHERE MEMBER_ID = #{memberId}
 	</delete>
 	<!-- 회원 정보수정 -->
 	<update id="updateMemberModify">
 		UPDATE MEMBER_TBL SET M_NICKNAME = #{mNickname}, MEMBER_PW = #{memberPw} 
 		, DELETE_YN = #{deleteYN}
 		, ADMIN_YN = #{adminYN} 
 		WHERE MEMBER_ID = #{memberId}
 	</update>
 	<!-- 회원 상태별로 카운트 -->
	<select id="selectTotalCount" resultType="_int">
 		SELECT count(*) FROM MEMBER_TBL
 	</select>
 	<select id="selectTodayCount" resultType="_int">
 		SELECT count(*) FROM MEMBER_TBL WHERE JOIN_DATE LIKE SYSDATE
 	</select>
 	<select id="selectDeleteMemberCount" resultType="_int">
 		SELECT count(*) FROM MEMBER_TBL WHERE DELETE_YN = 'Y'
 	</select>
 	
 	<!-- 도서 상태별로 카운트 -->
 	<select id="selectAllBoos" resultType="_int">
 		select count(*)
		from ORI_SERIES a 
		join ORIGIN_BOOK b on a.ORI_BOOK_NO = b.ORI_BOOK_NO
		join BOOK_PERMISSION c on b.ORI_BOOK_NO = c.ORI_BOOK_NO and a.series_no = c.book_series_no
 	</select>
 	<select id="selectApproveYes" resultType="_int">
 		select count(*)
		from ORI_SERIES a 
		join ORIGIN_BOOK b on a.ORI_BOOK_NO = b.ORI_BOOK_NO
		join BOOK_PERMISSION c on b.ORI_BOOK_NO = c.ORI_BOOK_NO and a.series_no = c.book_series_no
		WHERE CHECK_PERMISSION='Y'
 	</select>
 	<select id="selectApproveNo" resultType="_int">
 		select count(*)
		from ORI_SERIES a 
		join ORIGIN_BOOK b on a.ORI_BOOK_NO = b.ORI_BOOK_NO
		join BOOK_PERMISSION c on b.ORI_BOOK_NO = c.ORI_BOOK_NO and a.series_no = c.book_series_no
		WHERE CHECK_PERMISSION='N'
 	</select>
 	
 	
 	<!-- 관리자 메인페이지 -->
  	<resultMap type="Qna" id="qnaResultMap">
		<id column="QNA_NO" property="qnaNo" />
		<result column="MEMBER_ID" property="memberId" />
		<result column="QNA_CATEGORY" property="qnaCategory" />
		<result column="QNA_TITLE" property="qnaTitle" />
		<result column="QNA_CONTENTS" property="qnaContents" />
		<result column="QNA_CREATEDATE" property="qCreateDate" />
		<result column="QNA_UPDATEDATE" property="qUpdateDate" />
		<result column="QNA_STATUS" property="qnaStatus" />
		<result column="QNA_FILENAME01" property="qnaFilename01" />
		<result column="QNA_FILERENAME01" property="qnaFileRename01" />
		<result column="QNA_FILEPATH01" property="qnaFilepath01" />
		<result column="QNA_FILENAME02" property="qnaFilename02" />
		<result column="QNA_FILERENAME02" property="qnaFileRename02" />
		<result column="QNA_FILEPATH02" property="qnaFilepath02" />
		<result column="QNA_FILENAME03" property="qnaFilename03" />
		<result column="QNA_FILERENAME03" property="qnaFileRename03" />
		<result column="QNA_FILEPATH03" property="qnaFilepath03" />
		<result column="ANSWER_WRITER" property="answerWriter" />
		<result column="ANSWER_CONTENTS" property="answerContents" />
		<result column="ANSWER_CREATEDATE" property="aCreateDate" />
		<result column="ANSWER_UPDATEDATE" property="aUpdateDate" />
	</resultMap>
	
	<!--작가 정산관련 부분  -->
	<resultMap 	 type="WriterPay" 				id="WriterPayResultMap">
  		<id 	 property="memberId" 			column="MEMBER_ID"/> <!--id   -->
		<result  property="seriesNo" 			column="SERIES_NO"/> 	
		<result  property="ori_bookNo" 			column="ORI_BOOK_NO"/> 
		<result  property="putDate" 			column="PUTDATE"/> 
		<result  property="bankName" 			column="BANK_NAME"/> 
		<result  property="bankNo" 				column="BANK_NO"/> 
		<result  property="payment" 			column="PAYMENT"/> 
		<result  property="bankStatus" 			column="BANK_STATUS"/> 
		<result  property="wrpayNo"        		column="WRPAY_NO"/> 
		<result  property="changeP"             column="CHANGE_P"/> 
  	</resultMap> 
  	
  	<!-- 관리자 메인 4개 게시물 페이지 출력 -->
 	<select id="selectPrintNewMembers" resultMap="memberResultMap">
		<![CDATA[
			SELECT M_NICKNAME, MEMBER_ID, M_POINT, DELETE_YN, JOIN_DATE FROM MEMBER_TBL 
			WHERE ROWNUM <=5 ORDER BY JOIN_DATE DESC
		]]>
	</select>
	
    <select id="selectPrintNewBooks" resultMap="oriSeriesResultMap">
    	<![CDATA[
	    	select a.SERIES_NO, a.ORI_BOOK_NO, b.BOOK_TITLE, a.TITLE, a.CHECK_PERMISSION, b.MEMBER_ID
			from ORI_SERIES a 
			join ORIGIN_BOOK b on a.ORI_BOOK_NO = b.ORI_BOOK_NO
			join BOOK_PERMISSION c on b.ORI_BOOK_NO = c.ORI_BOOK_NO and a.series_no = c.book_series_no
	    	WHERE ROWNUM <=5 ORDER BY APPROVE_DATE DESC
	    ]]>
    </select>
    
	 <select id="selectPrintNewPay" resultMap="WriterPayResultMap">
    	<![CDATA[
	    	SELECT WRPAY_NO, MEMBER_ID, SERIES_NO, ORI_BOOK_NO, PAYMENT, BANK_NAME, BANK_STATUS FROM POINTCHANGE_TBL 
	    	WHERE ROWNUM <=5 ORDER BY PUTDATE DESC
	    ]]>
    </select>
    
    <select id="selectPrintNewQna" resultMap="qnaResultMap">
    	<![CDATA[
	 		SELECT QNA_NO, QNA_CATEGORY, MEMBER_ID, QNA_TITLE, QNA_STATUS, QNA_CREATEDATE FROM QNA_TBL 
			WHERE ROWNUM <=5 ORDER BY QNA_CREATEDATE DESC
		]]>
 	</select>
		
 </mapper>